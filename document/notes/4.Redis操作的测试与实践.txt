从文件读取每行redis命令执行
文件样式:1.txt
set key1 value1
set key2 value2
set key3 value3
在redis目录下执行命令
"cat QR20181023.txt | redis-cli --pipe" 可疑将1.txt中的数据逐行通过redis执行默认选择0库

官方在2.6版本推出了一个新的功能-pipe mode，即将支持Redis协议的文本文件直接通过pipe导入到服务端。文档地址:https://redis.io/topics/mass-insert
一个命令接着一个命令发送 每个命令都存在往返时间
管道
非阻塞I/O
以原始格式生成包含Redis协议的文本文件
之前(cat data.txt; sleep 10) | nc localhost 6379 > /dev/null
这并不是执行大规模导入的非常可靠的方法，因为netcat并不真正知道所有数据何时被传输，也不能检查错误。在Redis的2.6或更高版本中，Redis -cli实用程序支持一种名为pipe mode的新模式，这种模式是为了执行大规模插入而设计的。
cat data.txt | redis-cli --pipe
cat 2018-06-28.txt | redis-cli -h 192.168.1.888 -p 6379 --pipe
输出为 :
All data transferred. Waiting for the last reply...
Last reply received from server.
errors: 0, replies: 1000000




Ruby生成键值对
def gen_redis_proto(*cmd)
    proto = ""
    proto << "*"+cmd.length.to_s+"\r\n"
    cmd.each{|arg|
        proto << "$"+arg.to_s.bytesize.to_s+"\r\n"
        proto << arg.to_s+"\r\n"
    }
    proto
end

puts gen_redis_proto("SET","mykey","Hello World!").inspect
输出
(0...1000).each{|n|
    STDOUT.write(gen_redis_proto("SET","Key#{n}","Value#{n}"))
}

直接运行
$ ruby proto.rb | redis-cli --pipe
结果
All data transferred. Waiting for the last reply...
Last reply received from server.
errors: 0, replies: 1000


//linux下Redis的安装
https://blog.csdn.net/du_minchao/article/details/52180981
//代码实现
https://www.jianshu.com/p/ae949ffbd5af